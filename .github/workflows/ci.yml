name: Elang CI/CD

on:
  # push:
  #   branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/elang

jobs:
  # Backend tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run Go tests
        working-directory: ./backend
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./test/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.txt
          flags: backend
          name: backend-coverage

  # Build and Push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-backend
    # Push to Docker Hub on push to main/develop branches or on pull request merge
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') || (github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build Docker image (for PRs - no push)
  build:
    name: Build Docker Image (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # API Integration tests
  # test-api:
  #   name: API Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: test-backend
  #   if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
  #   services:
  #     postgres:
  #       image: postgres:15-alpine
  #       env:
  #         POSTGRES_DB: elang_db
  #         POSTGRES_USER: elang_user
  #         POSTGRES_PASSWORD: test_password
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up environment
  #       run: |
  #         cp .env.example .env
  #         sed -i 's/DB_HOST=postgres/DB_HOST=localhost/' .env
  #         sed -i 's/DB_PASSWORD=change_this_password/DB_PASSWORD=test_password/' .env

  #     - name: Initialize database
  #       env:
  #         PGPASSWORD: test_password
  #       run: |
  #         psql -h localhost -U elang_user -d elang_db -f schema.sql

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and start services
  #       run: |
  #         docker-compose up -d --build
  #         sleep 30

  #     - name: Check services health
  #       run: |
  #         docker-compose ps
  #         curl -f http://localhost:8080/health || exit 1

  #     - name: Install Newman
  #       run: |
  #         npm install -g newman
  #         npm install -g newman-reporter-htmlextra

  #     - name: Run API tests
  #       run: |
  #         newman run tests/Elang_API_Tests.postman_collection.json \
  #           -e tests/Elang_Environment.postman_environment.json \
  #           --reporters cli,json \
  #           --reporter-json-export test-results.json

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: newman-test-results
  #         path: test-results.json

  #     - name: Show logs on failure
  #       if: failure()
  #       run: |
  #         echo "=== Backend Logs ==="
  #         docker-compose logs elang-backend
  #         echo "=== PostgreSQL Logs ==="
  #         docker-compose logs postgres

  #     - name: Cleanup
  #       if: always()
  #       run: docker-compose down -v

  # Lint and code quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m

  # Security scanning
  # security:
    # name: Security Scan
    # runs-on: ubuntu-latest
    
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Run Trivy vulnerability scanner
    #     uses: aquasecurity/trivy-action@master
    #     with:
    #       scan-type: 'fs'
    #       scan-ref: '.'
    #       format: 'sarif'
    #       output: 'trivy-results.sarif'

    #   - name: Upload Trivy results to GitHub Security
    #     uses: github/codeql-action/upload-sarif@v2
    #     if: always()
    #     with:
    #       sarif_file: 'trivy-results.sarif'

  # Docker image security scan
  # scan-docker:
    # name: Scan Docker Image
    # runs-on: ubuntu-latest
    # needs: test-backend
    
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Build image for scanning
    #     run: docker build -t ${{ env.DOCKER_IMAGE }}:scan .

    #   - name: Run Trivy scanner on Docker image
    #     uses: aquasecurity/trivy-action@master
    #     with:
    #       image-ref: ${{ env.DOCKER_IMAGE }}:scan
    #       format: 'table'
    #       exit-code: '1'
    #       ignore-unfixed: true
    #       severity: 'CRITICAL,HIGH'
