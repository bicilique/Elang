version: '3.8'


# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2025-02-28T09-55-16Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
    interval: 5s
    timeout: 5s
    retries: 5



services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spd-db
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - spd-network

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
    restart: unless-stopped
    networks:
      - spd-network

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2
    restart: unless-stopped
    networks:
      - spd-network

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2
    restart: unless-stopped
    networks:
      - spd-network

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2
    restart: unless-stopped
    networks:
      - spd-network

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
      minio3:
        condition: service_healthy
      minio4:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spd-network

  # Elang Backend Application
  elang-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: elang-backend
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_USE_SSL=${MINIO_USE_SSL}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - APP_PORT=${APP_PORT}
      - GIN_MODE=${GIN_MODE}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      nginx:
        condition: service_started
      createbuckets:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - spd-network

  createbuckets:
    image: minio/mc
    depends_on:
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
      minio3:
        condition: service_healthy
      minio4:
        condition: service_healthy
    env_file:
      - .env.minio
    entrypoint: >
      /bin/sh -c "
        until mc alias set myminio http://minio1:9000 minioadmin minioadmin; do
          echo 'Waiting for MinIO...';
          sleep 2;
        done;

        echo 'Creating bucket...';
        mc mb -p myminio/${BUCKET_NAME};

        echo 'Creating access key (user)...';
        mc admin user add myminio ${STORAGE_ACCESS_KEY} ${STORAGE_SECRET_KEY};

        echo 'Attaching readwrite policy...';
        mc admin policy attach myminio readwrite --user=${STORAGE_ACCESS_KEY};

        echo 'MinIO setup complete.';
        exit 0;
      "
    networks:
      - spd-network


volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
  postgres_data:
    driver: local

networks:
  spd-network:
    driver: bridge
