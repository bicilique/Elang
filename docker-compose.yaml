version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: elang-db
    env_file:
      - backend/.env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - ./data/database:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - elang-network

  minio:
    image: quay.io/minio/minio:RELEASE.2025-02-28T09-55-16Z
    container_name: elang-minio
    hostname: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - elang-network

  # Elang Backend Application
  elang-backend:
    image: afiffaizianur/elang:latest
    container_name: elang-backend
    env_file:
      - backend/.env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
      - STORAGE_ENDPOINT=minio:9000
      - STORAGE_ACCESS_KEY=${STORAGE_ACCESS_KEY}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY}
      - BUCKET_NAME=${BUCKET_NAME}
      - STRORAGE_SSL=${STRORAGE_SSL}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - PORT=${PORT}
      - MODE=${MODE}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - elang-network

  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - backend/.env
    entrypoint: >
      /bin/sh -c "
        until mc alias set myminio http://minio:9000 minioadmin minioadmin; do
          echo 'Waiting for MinIO...';
          sleep 2;
        done;

        echo 'Creating bucket...';
        mc mb -p myminio/${BUCKET_NAME};

        echo 'Creating access key (user)...';
        mc admin user add myminio ${STORAGE_ACCESS_KEY} ${STORAGE_SECRET_KEY};

        echo 'Attaching readwrite policy...';
        mc admin policy attach myminio readwrite --user=${STORAGE_ACCESS_KEY};

        echo 'MinIO setup complete.';
        exit 0;
      "
    networks:
      - elang-network


volumes:
  minio_data:
  postgres_data:
    driver: local

networks:
  elang-network:
    driver: bridge
